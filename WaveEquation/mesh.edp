// PARAM -ns 

include "getARGV.idp"
load "gsl"
load "helper_functions"

// Random seed for random number generation
int seed = getARGV("-seed", 0);
randinit(seed);
gslrng randgen = gslrngtype(0); // Random number generator in GSL

////////////////
// Parameters //
////////////////

macro dimension 2 //
real c0 = getARGV("-c0",1540);                           // background speed of sound
real sigma = getARGV("-sigma",0.25);                     // standard deviation of normal distribution in coefficient c in reflectors
real T = getARGV("-tissue",5.0e-3);                      // dimension [m] of biological tissue
real radius = getARGV("-radius",2.5e-4);                 // radius [m] of reflectors
real rho = getARGV("-rho",0.2);                          // target filling ratio of reflectors
real delta = 1.0e-4*radius;
real minDistance = 2*radius+delta;                       // distance [m] minimale entre les centres des cercles
int Nreflectors = lround(rho*4*T*T/(pi*radius^2));       // target number of reflectors
int nbndR = getARGV("-nbndR", 15);                       // number of points on boundary of reflectors
real hmin = 2*pi*radius/nbndR;                           // minimal mesh size [m] due to presence of reflectors
int n2T = lround(2*T/hmin);                              // total number of mesh points along biological tissue boundary
int reflectorboundary = -1;                              // labels for the reflector boundaries
int backgroundboundary = -2;                             // label for the square boundary

////////////////
// Reflectors //
////////////////

// Initialisation center of reflector positions
real[int] Rx(Nreflectors), Ry(Nreflectors);

// Generating reflectors: hardcore Matern process
int[int] keep(Nreflectors);
real ddist;
for (int i = 0; i < Nreflectors; ++i) {
  Rx[i] = (-T + (radius + delta)) + 2 * (T - (radius + delta)) * randreal1();;
  Ry[i] = (-T + (radius + delta)) + 2 * (T - (radius + delta)) * randreal1();;
  keep[i] = 1;
  validCenter(i, Rx, Ry, keep, minDistance);
}
int count = 0;
for (int i = 0; i < Nreflectors; ++i) {
  if (keep[i]) {
    Rx[count] = Rx[i];
    Ry[count] = Ry[i];
    count++;
  }
}
Nreflectors = count;
Rx.resize(Nreflectors);
Ry.resize(Nreflectors);

// Definition of boundary of reflectors
border reflector(t=0, 2*pi; i){
    x = Rx[i] + radius*cos(t);
    y = Ry[i] + radius*sin(t);
    label = reflectorboundary;  
}

// Number of mesh points on reflector boundaries
int[int] reflectornbpts(Nreflectors);
for (int k = 0; k < Nreflectors; k++){
  reflectornbpts[k] = nbndR;
}

///////////////////
// Building mesh //
///////////////////

// Biological tissue boundary
border BTtop   (t=0, 1){x=-T+(1-t)*2*T; y=-T+ 1   *2*T; label=backgroundboundary;}
border BTleft  (t=0, 1){x=-T+ 0   *2*T; y=-T+(1-t)*2*T; label=backgroundboundary;}
border BTbottom(t=0, 1){x=-T+ t   *2*T; y=-T+ 0   *2*T; label=backgroundboundary;}
border BTright (t=0, 1){x=-T+ 1   *2*T; y=-T+ t   *2*T; label=backgroundboundary;}

// Building mesh
mesh Th = buildmesh(
  BTtop(n2T) + BTleft(n2T) + BTbottom(n2T) + BTright(n2T) +
  reflector(reflectornbpts),
  nbvx=10^8
);
//plot(Th,wait=1);

////////////////////
// Speed of sound //
////////////////////

// Generating a random normal distribution of values for c around c0 in the reflectors 
real[int] ctab(regions(Th).max+1);
for (int k = 0; k < Nreflectors; k++){
  ctab[k] = c0 * (1.0 + gslrangaussian(randgen, sigma));
}
// Actual speed of sound function to use in the variational form
func c = ((region < Nreflectors) ? ctab[region] : c0); //c0 is the background speed of sound



////////////////////
// Source terms
////////////////////

real f0 = 1e6; // frequency [Hz]
real omega0 = 2 * pi * f0;
real t0 = 1.2e-7; // time [s] at which the source is applied
real tau = 0.8;
real x0Center = 0.0;
real y0Center = 0.0;

////////////////////
// Time stepping
////////////////////

real t = 0.0;
real dt = 1e-8;
real Tmax = 3e-5;
int nSteps = Tmax / dt;

func f = (omega0 * cos(omega0 * (t - t0)) - (2 * omega0^2 * (t - t0) / (tau^2)) * sin(omega0 * (t - t0))) * exp(- (omega0^2 * (t - t0)^2) / (tau^2));

real k0 = (1.0/50.0)*1e5;

func g = exp(-k0^2 * ((x - x0Center)^2 + (y - y0Center)^2));

////////////////////
// Initial fields
////////////////////

func Pk = P1;

// SpaceDefinition
fespace Vh(Th, Pk);
Vh u, un0 = 0, un1 = 0;
Vh v;

cout << "Length of tissue             " << 2*T       * 1.0e6 << "\t[\mu m]" << endl;
cout << "Radius of reflector          " << radius    * 1.0e6 << "\t[\mu m]" << endl;
cout << "Wavelength                   " << c0/f0     * 1.0e6 << "\t[\mu m]" << endl;
cout << "Meshsize h                   " << 2.0*T/n2T * 1.0e6 << "\t[\mu m]" << endl;
cout << "Gaussian parameter           " << 1.0/k0    * 1.0e6 << "\t[\mu m]" << endl;

cout << "Center of source function    " << t0        * 1.0e9 << "\t[ns]" << endl;
cout << "Time step                    " << dt        * 1.0e9 << "\t[ns]" << endl;

cout << "CFL condition                " << c0*dt/(2.0*(2.0*T/n2T)) << endl;

int step = 0;
problem waveEquation(u, v, init=step) =
  int2d(Th)(
    u * v
  )
  +int2d(Th)(
    (c^2 * dt^2) * (dx(un0) * dx(v) + dy(un0) * dy(v))
  )
  - int2d(Th)(
    (2 * un0 - un1) * v
  )
  - int2d(Th)(
    (dt^2) * f * g * v
  );

Vh cv = c;
plot(cv, wait = true, fill = true, value = true, dim = 2);

real tic, toc;
for (step = 0; step < nSteps; ++step) {
  t = step * dt;
  tic = clock();

  waveEquation; // solves for u
  un1 = un0;
  un0 = u;

  toc = clock() - tic;
  cout << toc << endl;

  plot(u, wait = false, fill = true, value = true, cmm = "Step " + step, dim = 2);
  // savevtk("wave"+step+".vtk", Th, u, dataname = "u", order = 1); // for Paraview
}
